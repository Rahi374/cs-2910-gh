* links:
https://medium.com/@manivannan_data/object-tracking-referenced-with-the-previous-frame-using-euclidean-distance-49118730051a
https://github.com/yehengchen/Object-Detection-and-Tracking
https://github.com/yehengchen/Object-Detection-and-Tracking/tree/master/OneStage/yo
https://github.com/yehengchen/Object-Detection-and-Tracking/tree/master/OneStage/yolo/deep_sort_yolov3

* notes

to compile darknet with cuda and opencv, set GPU and OPENCV in the first few
lines of Makefile to 1

don't forget to ~ln -s /usr/lib/whatever/opencv/opencv.pc /usr/lib/pkgconfig/opencv.pc~

also apply that's guy's update patch:
(honestly, probably need the whole pr at
[https://github.com/pjreddie/darknet/pull/1348/commits]), but at least just
[https://github.com/pjreddie/darknet/pull/1348/commits/24cff08086b573c3341e91d072430c9f624a2208]
is good enough, might need to tweak a bit though

and force opencv4, otherwise it won't find opencv2/opencv.hpp
- my version of the aforementioned commit

and for ric, make sure to set env var:
~PKG_CONFIG_PATH=/usr/local/contrib/lib64/pkgconfig~
for opencv4. tbh the lib (non-64) version should be added as well, but with
what i set up on ric, opencv4 is the only pkgconfig in lib64, and all the
pkgconfigs in lib are for libav stuff.

and make sure to pick up the shared objects:
~LD_LIBRARY_PATH=/usr/local/contrib/lib64:$LD_LIBRARY_PATH~

also point to nvcc, either in the makefile with NVCC, or by adding to path
- ~/usr/local/cuda/bin~
- or ~/opt/cuda-10.1/bin~ on ric

also if you want to use opencv2 with python3 on ric:
~PYTHONPATH=/usr/local/contrib/lib/python3.6/site-packages:$PYTHONPATH~

to use the ffmpeg codecs on gstreamer:
~GST_PLUGIN_PATH=/usr/local/contrib/lib/gstreamer-1.0:$GST_PLUGIN_PATH~

* baseline

base darknet run
~./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg~

live detector
~./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights videofile~

on neptunite:
data/dog.jpg: Predicted in 12.952805 seconds.
dog: 100%
truck: 92%
bicycle: 99%

on peridot:
data/dog.jpg: Predicted in 79.676022 seconds.
dog: 100%
truck: 92%
bicycle: 99%

of course cpu takes longer on peridot :)


hm, regular run with real-time webcam crashes
137 = sigkill, probably oom?
let's try the tiny weights

it runs on tiny? but freezes? maybe network bw issue? let's try on hdmi
hm yeah looks like it crashed

hm looks like not enough power coz it sometimes crashes with just qv4l2 or
just regular image detection (with tiny weights)
imma get the 5V/4A power adapter
i only have 5V/2A right now :/

power adapter arrived! yolo tiny runs! but it can only recognize people...
and misclassified my watch as a cellphone once lol
i wonder if it can work with the regular yolo... nope, it still dies at step
17, probably oom
yeah it got killed by the oom killer - ah, we only have 4GB of ram
- swap? looks like it comes with 2GB of swap

great, undocumented parameters to detector demo
-w for width, -h for height, -fps for fps
and i think these extra params go after the cfgs and the weights and stuff
coz those use positional args
also after weights you can specify input file name

i got 10 fps with 480p! and 240p. and 160p.
8 fps with 720p
5 fps with 1080p

hm, 9 fps with motchallenge 17 @360p


hm darknet with an input video doesn't work for some reason :/
on ric at least; it works on neptunite

#+BEGIN_SRC log
./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights ../../one_evening_in_campo_santa_maria_nova_venice_1080p.mp4
...
video file: ../../one_evening_in_campo_santa_maria_nova_venice_1080p.mp4
[ WARN:0] global /usr/local/contrib/opencv/src/modules/videoio/src/cap_gstreamer.cpp (1743) handleMessage OpenCV | GStreamer warning: your GStreamer installation is missing a required plugin
[ WARN:0] global /usr/local/contrib/opencv/src/modules/videoio/src/cap_gstreamer.cpp (1743) handleMessage OpenCV | GStreamer warning: your GStreamer installation is missing a required plugin
[ WARN:0] global /usr/local/contrib/opencv/src/modules/videoio/src/cap_gstreamer.cpp (1759) handleMessage OpenCV | GStreamer warning: Embedded video playback halted; module uridecodebin0 reported: Your GStreamer installation is missing a plug-in.
[ WARN:0] global /usr/local/contrib/opencv/src/modules/videoio/src/cap_gstreamer.cpp (888) open OpenCV | GStreamer warning: unable to start pipeline
[ WARN:0] global /usr/local/contrib/opencv/src/modules/videoio/src/cap_gstreamer.cpp (480) isPipelinePlaying OpenCV | GStreamer warning: GStreamer: pipeline have not been created
Couldn't connect to webcam.
: Success
darknet: ./src/utils.c:256: error: Assertion `0' failed.
zsh: abort (core dumped)  ./darknet detector demo cfg/coco.data
cfg/yolov3.cfg yolov3.weights 
#+END_SRC

hm list gstreamer plugins...
ah, ric is missing h264 decoder lol. and a bunch of other codecs actually
alright, i'll convert the video to... wait ffmpeg comes with libavcodec... is
that sufficient?

okay yeah i had to install ffmpeg (4.2.2) and then gst-libav (1.10.4, to
match the gstreamer version on ric). oh also needed meson to build gst-libav.
also set the environment variable: see above

okay so now the darknet demo detector works! on the "one evening in campo sant
maria nova venice" 1080p. i get 12~17 fps, and it segfaults :)

oops i guess i was running the wrong version of the video. this time i tried
MOT17-02-DPM. got 3~18 fps, and it still segfaults. it does get through most
(or all) of the video, though (but also it's only 40 seconds, and the last
one was a lot more).

okay here's the segfault:
#+BEGIN_SRC log
==51380== Process terminating with default action of signal 11 (SIGSEGV)
==51380==  Access not within mapped region at address 0x51F02D770
==51380==    at 0x9B30960: icv_l9_owniSwapChannels_8u_C3R (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_imgproc.so.4.2.0)
==51380==    by 0x9B2FDE6: icv_l9_ippiSwapChannels_8u_C3R (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_imgproc.so.4.2.0)
==51380==    by 0x96AF774: cv::CvtColorIPPLoop_Invoker<cv::IPPReorderFunctor>::operator()(cv::Range const&) const (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_imgproc.so.4.2.0)
==51380==    by 0xB0B963D: (anonymous namespace)::ParallelLoopBodyWrapper::operator()(cv::Range const&) const (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_core.so.4.2.0)
==51380==    by 0xB0B9FDA: cv::ParallelJob::execute(bool) [clone .constprop.44] (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_core.so.4.2.0)
==51380==    by 0xB0BAC9C: cv::WorkerThread::thread_body() (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_core.so.4.2.0)
==51380==    by 0xB0BAE52: cv::WorkerThread::thread_loop_wrapper(void*) (in /afs/cs.pitt.edu/system/amd64_cen7/usr/local/contrib/lib64/libopencv_core.so.4.2.0)
==51380==    by 0x166B6DD4: start_thread (in /usr/lib64/libpthread-2.17.so)
==51380==    by 0x169C8EAC: clone (in /usr/lib64/libc-2.17.so)
==51380==  If you believe this happened as a result of a stack
==51380==  overflow in your program's main thread (unlikely but
==51380==  possible), you can try to increase the size of the
==51380==  main thread stack using the --main-stacksize= flag.
==51380==  The main thread stack size used in this run was 8388608.
==51380== 
==51380== HEAP SUMMARY:
==51380==     in use at exit: 7,464,752,931 bytes in 220,573 blocks
==51380==   total heap usage: 513,540 allocs, 292,967 frees, 8,719,829,795 bytes allocated
==51380== 
==51380== LEAK SUMMARY:
==51380==    definitely lost: 16,549 bytes in 2 blocks
==51380==    indirectly lost: 0 bytes in 0 blocks
==51380==      possibly lost: 4,179,136 bytes in 8,483 blocks
==51380==    still reachable: 7,460,360,630 bytes in 211,014 blocks
==51380==                       of which reachable via heuristic:
==51380==                         stdstring          : 11,695 bytes in 213 blocks
==51380==                         length64           : 11,680 bytes in 253 blocks
==51380==                         newarray           : 2,112 bytes in 52 blocks
==51380==         suppressed: 0 bytes in 0 blocks
==51380== Rerun with --leak-check=full to see details of leaked memory
==51380== 
==51380== For counts of detected and suppressed errors, rerun with: -v
==51380== Use --track-origins=yes to see where uninitialised values come from
==51380== ERROR SUMMARY: 10000000 errors from 5 contexts (suppressed: 0 from 0)
zsh: segmentation fault (core dumped)  valgrind ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights 
#+END_SRC

* code stuff

okay while waiting for the adapter, let's check the code
entry point is ~examples/detector.c:run_detector()~
that calls into ~src/demo.c:demo()~, which is the main run loop for the thing
and then ~fetch_in_thread()~ and ~detect_in_thread()~ is the main contents of the
loop
looks like all symbols are exported by libdarknet so it shouldn't be that
hard to stitch together? anyway im not done reading fetch and detect yet

~fetch_in_thread()~:
- free buffer
- get buffer from stream: ~src/image_opencv.cpp:get_image_from_stream()~
- put the boxed image into the main image buffer: ~src/image.c:letterbox_image_into()~

where does buff_letter come from? it is predicted from the last frame in
~detect_in_thread()~?

~letterbox_image_into()~:
- ~resize_image()~ (i think it's resizing to the size of the bounding box?)
- ~embed_image()~ - puts an image into an image... here it's putting the boxed
  image into the main image it looks like
- ~free_image()~ - free the temporarily allocated ~image from resize_image()~

~detect_in_thread()~:
- i think applying the network: ~src/network.c:network_predict()~
- im guessing caching the network/application: ~src/demo.c:remember_network()~
- not sure: ~src/demo.c:avg_predictions()~
  - goes into ~src/box.c:do_nms_obj()~
    - i have no idea what this does - thanks for the commit message: "MERRY
      CHRISTMAS I BROKE ALL YOUR DETECTION THINGS"
- ~draw_detections()~
- ~free_detections()~, and update the (global) buffer index

~src/network.c:network_predict()~:
- ~forward_network()~ -> ~forward_network_gpu()~
  - cuda stuff
